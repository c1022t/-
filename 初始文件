# -#include<stdio.h>//包含一个这样的文件，standard，标准， input output
#include<string.h>
	//结构体
//人，书，为复杂对象----名字，身高，年纪........

	
	
struct Book
{
	char name[20];//c语言程序设计
	short price;//55
	
};
int main()
{//利用结构体类型，创建一个该类型的变量
	struct Book b1 = {"C语言程序设计",55};
	strcpy(b1.name,"C++");//string-copy  字符串拷贝
	printf("%s\n",b1.name);
	
	
//	struct Book* ct = &b1;
//	printf("%s\n",ct->name);
//	printf("%d\n",ct->price);
//		
//	printf("%s\n",(*ct).name);
//	printf("%s\n",(*ct).price);
//	.   结构体变量.成员
//->    结构体指针->成员
		
//	printf("书名：%s\n",b1.name);
//	printf("价格：%d元\n",b1.price);
//	
	
	
	
    return 0;
}








	
	
	
//	printf("%d\n",sizeof(char*));
//	printf("%d\n",sizeof(short*));
//	printf("%d\n",sizeof(double*));
//	printf("%d\n",sizeof(int*));//都为地址，为4
//
//	
	
	
	
	
	
//	double d = 3.14;
//	double* pd = &d;
//	printf("%d\n",sizeof(pd));//4或者8，32位为2，64位为8
////	*pd = 5.5;
//	printf("%lf\n",d);
//	printf("%lf\n",*pd);
//	
//	int a = 10;
//	//printf("%p\n",&a);
//	int* p = &a;//p为一个指针变量 类型为int*
//	printf("%p\n",p);
//	*p = 20;//解引用操作符，间接访问操作符
//	printf("a = %d\n",a);
//	
//	









////如何产生地址
//int main()
//{
//	char ch ='w';
//	char* zz = &ch;
//	*zz = 'z';
//	printf("%c\n",ch);
//	printf("%d\n",sizeof(zz));
//	return 0;
//}
//int main()
//{
//	int a = 10;
//	int* p = &a;//取出a的地址
//	//有一种变量是用来存放地址的----指针变量
//	printf("%p\n",&a);
//	printf("%p\n",p);
//	*p = 20;//解引用操作符
//	printf("a = %d\n",a);// 输出为20	
//	
//	
//	
//	return 0;
//}
//
//


//int main()
//{
//	return 0;
//}
//







////#define 定义常量和宏
//#define MAX(X,Y) (X>Y?X:Y)
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = MAX(a,b);
//	printf("max = %d\n",max);
//	return 0;
//}


//void test()
//static修饰局部变量，使局部变量的生命周期变长,
//static 修饰全局变量，改变了变量的作用域-让静态的全局变量只能在自己的源文件内部使用
//出了源文件则不能使用
//static修饰函数，改变了函数的链接属性
//{static int a = 1;//a为静态局部变量 加入static以后，局部变量出范围时不销毁
//	a++;
//	printf("a = %d\n",a);
//}
//int main()
//{
//	int i = 0;
//	while(i<5)
//	{
//		test();
//			printf("%d\n",i);
//		i++;
//	}
//
//	return 0;
//}
//
//




//int Add(int x,int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	//int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	//printf("%d\n",arr[4]);//[] ---下标引用操作符
//	int a = 10;
//	int b = 20;
//	int sum = Add(a,b);//函数调用操作符
//	printf("sum = %d\n",sum);
//	return 0;
//}




////条件操作符 ---三目操作符
////exp1? exp2: exp3
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = 0;
//	max = (a>b? a : b);
//	printf("%d\n",max);
//	return 0;
//}
//
//
//
//
//
////int main()
//{
//	//真 --非0
//	//假 --0
//	//&& --逻辑与  全真为1，一假则0
//	//|| --逻辑或  有真则1，全假为0
//	return 0;
//}
//




//int main()//强制类型转换
//{
//	int a = (int)3.14;
//	return 0;
//}
//
//

//int main()
//{
//	int a = 10;
//	//int b = a++;//后置++，先使用再++，先把a的值赋给b，a再自增
//	//int b = ++a;//前置++；先++，再使用
//	int b = --a;
//	printf("a = %d b = %d\n",a,b);//a = 11,b = 10    a = 11,b = 11
//	
//	return 0;
//}
//




//原码，反码，补码
//int main()
//{
//	int a = 0;
//	int b = ~a;
//	printf("%d\n",b);//~为按位取反 二进制位
//	//原码，反码，补码，负数在内存中存储的时候，存储的是二进制的补码
//	//使用的，打印的是数的原码
//	//原码符号位不变，其余取反，得到反码，反码+1得到补码
//	return 0;
//	
//}
//只要是整数，内存中存储的都是二进制的补码
//正数---原码，反码，补码相同
//负数：
//原码---------------------反码----------------------------------补码
//直接按照正负          原码的符号位不变                     反码+1
//写出的二进制序列      其他位按位取反得到
//-2
//100000000000000000000000000000010--原码
//111111111111111111111111111111101--反码
//111111111111111111111111111111110--补码


//int Max(int x,int y)
//{
//	if (x>y)
//	return x;
//	else
//	return y;
//}
//int main()
//{
//	int num1 = 10;
//	int num2 = 20;
//	int max = 0;
//	max = Max(num1,num2);
//	printf("max = %d\n",max);
//	return 0;
//}
//
//
//




//int main()
//{
//	int a = 10;
//	a = 20;//=为赋值， ==为判断相等
//	a = a+10;
//	a +=10;//两者等价
//	//复合赋值符 +=  -= *=  /=  %=.......
//	return 0;
//}
//
//








//int main()
////2进制  位操作  &按位与，|按位或，^按位异或
//{
//	int a = 3;
//	int b = 5;
//	int c = a^b;
//	//011
//	//101    
//	//与 001   或 111     异或  对应二进制相同则为0，相异则为1   110
//	printf("%d\n",c);
//	return 0;
//}



////数组下标从0开始
//{
//	int arr[10]= {1,2,3,4,5,6,7,8,9,10};//定义一个存放10个整数数字的数组
//	//printf("%d\n",arr[4]);//结果为5,因为arr[下标]，以下标的方式访问元素
//	int i = 0;
//	while (i<10)
//	{
//		printf("%d",arr[i]);
//		i++;
//	}
//	
//	
//	return 0;
//}



////自定义函数
//int Add(int x, int y)
//{
//	int z = x + y;
//	return z;
//}
//
//int main()
//
//{
//	int num1 = 10;
//	int num2 = 20;
//	int sum = 0;
//	//sum = num1 + num2;
//	sum = Add(num1,num2);
//	printf("sum = %d\n",sum);
//	
//	return 0;
//}
//
//


////while 循环
//{
//	int line = 0;
//	
//	printf("加入比特\n");
//	
//	while(line<2000)
//		{
//		printf("敲一行代码 %d\n",line);
//		line++;
//		
//	}
//	if(line>=2000)
//	   printf("好offer\n");
//	return 0;
//}
//////

//{
//	int input = 0;
//	printf("加入比特\n");
//	printf("你要好好学习吗？(1/0)>:");
//	scanf("%d",&input);
//	if(input == 1)
//	   printf("好offer\n");
//	else
//	   printf("卖红薯\n");
//	
//	return 0;
//}



/*
{    //\ddd表示1~3个八进制数字，\xdd表1~2个16进制
	printf("%d\n",strlen("c:\\test\\32\\test.c"));
	//\32   32---表两个八进制数字，32作为8进制代表的那个十进制数字，作为ASCII码值，对应的字符
	//32--3*8的一次+2*8的0次=26----
	printf("%c\n",'\132');
	printf("%c\n",'\61');
	return 0;
}
*/

//{
//	printf("%c\n",'\'');//\'使单引号转义
//	printf("%s\n","\"");同上
//	return 0;
//}

//{
//	printf("c:\\test\\32\\test.c");// \t--水平制表符（Tab） 打印出c:\test\32\test.c,\\防止了它转义
//	
//	return 0;
//}
//转义字符--转变原来的意思
// ??)---三字母词，古老编译器存在，\?\?)此刻问号不改变，斜杠防止了？被解析为三字母词
//  \'---字符常量',
// \"


//{
//	char arr1[] = "abc";
//	char arr2[] = {'a','b','c',0};
//	printf("%d\n",strlen(arr1));//strlen--string length-计算字符串长度的函数-----3（abc\0）
//	printf("%d\n",strlen(arr2));//-----随机值，未知的（abc￥……￥#&##￥#\0） 
//	// 
//	return 0;
//}




////字符串，由双引号引起" " %s
////数组,打印字符串用%s  ,
////'a' = 97 ASCII码值  数据在计算机上存储的时候，存储的是二进制
////# a v $ 各有表达的号码--------ASCII编码
//{   char arr1[] = "abc";//除了abc 还放了\0，为字符串的结束标志，值为0,不算入字符串内容
//    char arr2[] = {'a','b','c',0};// 只放了a，b，c，所以后边为随机值，主动放进\0或0，它才有了结束
//    printf("%s\n",arr1); 
//    printf("%s\n",arr2); 
//
//	
//	return 0;
//}



//枚举常量-一一列举，例如，性别，三原色
//枚举关键字-enum
//enum Color
//{
//	RED,
//	YELLOW,
//	BLUE
//	};
// 以上三个为枚举常量
//int main()
//{
//	//enum Sex s = FEMALE
///	printf("%d\n",RED);//0	printf("%d\n",YELLOW);//1
//	printf("%d\n",BLUE);//2
//	return 0;
//}




//#define MAX 10
//{
//	//#define 定义的标识符常量
//	int arr[MAX] = {0};
//	printf("%d\n",MAX);
//	return 0;
//}


//{
//	const int n = 10;
//	int arr[n] = {0};//创建数组
//	return 0;
//}





//{
//	const int num = 3;//const为常属性，修饰的常变量
//	//4;//字面常量
//	printf("%d\n",num);//num的本属性仍是常变量
//	num = 8;
//	printf("%d\n",num);
//	return 0;
//}
//{
//	int num1 = 0;
//	int num2 = 0;
//	int sum = 0;
//	scanf("%d%d",&num1,&num2);
//	sum = num1 + num2;
//	printf("sum = %d\n",sum);
	
	
	
	
	
	
//	return 0;
//}
//{
//	
//	//计算两个数的和
//	int num1 = 0;
//	int num2 = 0;
//	int sum = 0;
//	//输入数据-使用输入函数-scanf
//	scanf("%d%d",&num1,&num2);//&-取地址符
//
//	
//	sum=num1 + num2 ;
//	printf("sum = %d\n",sum);//c语言语法规定，变量定义在当前代码块前边
//    return 0;
//}








//int a = 10;
//int main()
//{
	
//	printf("%d\n",a);
//	return 0;
//}
//局部变量优先权，局部与全局变量名字不建议相同，容易bug






//int main()//程序的入口，主函数，唯一性
//{
//	printf("hello,小狗\n");//打印函数，function
//	//int 整形
//	//main 前面的int表示main函数调用返回一个整型值
//	return 0;//返回 0
//}
	//char ch = 'A';//向内存申请空间存放A
	//printf("%c\n",ch);//%c为打印字符格式的数据
	
	//int age = 20;
	//printf("%d\n",age);//%d为打印整型十进制数据
	
	//short int //短整型
	//long int num = 100;
	//printf("%d\n",num);
	
	//float f = 5.0;
	//printf("%f\n",f);
	
	//double d = 3.14;
    //printf("%lf\n",d);
	
	//printf("%d\n",sizeof(char));
	//printf("%d\n",sizeof(short));
	//printf("%d\n",sizeof(long));
	//printf("%d\n",sizeof(int));
	//printf("%d\n",sizeof(long long));
	//printf("%d\n",sizeof(float));
	//printf("%d\n",sizeof(double));
	
	//short age = 20;//向内存申请两个字节，用来存放20
	//float weight = 95.6f;//向内存申请四个字节存放小数
	

	
